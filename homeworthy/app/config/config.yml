imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: en
    images_directory: '%kernel.root_dir%/web/uploads/images'

framework:
    #esi: ~
    translator: { fallbacks: [en] }
    secret: '%secret%'
    router:
        resource: '%kernel.project_dir%/app/config/routing.yml'
        strict_requirements: ~
    form: ~
    csrf_protection: ~
    validation: { enable_annotations: true }
    #serializer: { enable_annotations: true }
    templating:
        engines: ['twig']
    default_locale: '%locale%'
    trusted_hosts: ~
    session:
        # https://symfony.com/doc/current/reference/configuration/framework.html#handler-id
        handler_id: session.handler.native_file
        save_path: '%kernel.project_dir%/var/sessions/%kernel.environment%'
    fragments: ~
    http_method_override: true
    assets: ~
    php_errors:
        log: true

# Twig Configuration
twig:
    debug: '%kernel.debug%'
    strict_variables: '%kernel.debug%'
    form_themes:
            - ':Form:media_widgets.html.twig'

# Doctrine Configuration
doctrine:
    dbal:
        driver: pdo_mysql
        host: '%database_host%'
        port: '%database_port%'
        dbname: '%database_name%'
        user: '%database_user%'
        password: '%database_password%'
        charset: utf8mb4
        types:
            json: Sonata\Doctrine\Types\JsonType
        default_table_options:
            charset: utf8mb4
            collate: utf8mb4_unicode_ci
        # if using pdo_sqlite as your database driver:
        #   1. add the path in parameters.yml
        #     e.g. database_path: '%kernel.project_dir%/var/data/data.sqlite'
        #   2. Uncomment database_path in parameters.yml.dist
        #   3. Uncomment next line:
        #path: '%database_path%'

    orm:
        auto_generate_proxy_classes: '%kernel.debug%'
        auto_mapping: true

# Swiftmailer Configuration
swiftmailer:
    transport: '%mailer_transport%'
    host: '%mailer_host%'
    username: '%mailer_user%'
    password: '%mailer_password%'
    spool: { type: memory }

fos_user:
    db_driver: orm # other valid values are 'mongodb' and 'couchdb'
    firewall_name: main
    user_class: AppBundle\Entity\User
    from_email:
        address: "noreply@yourcompany.com"
        sender_name: "No Reply"
    resetting:
        email:
                from_email:
                    address: resetting@example.com
                    sender_name: Demo Resetting
    registration:
           form:
               type: AppBundle\Form\RegistrationType

vich_uploader:
    db_driver: orm
    mappings:
            offer_images:
                uri_prefix:        /images/offer_images
                upload_destination: '%kernel.root_dir%/../web/uploads/images/offers'
                namer:              vich_uploader.namer_uniqid

sonata_block:
    default_contexts: [cms]
    blocks:
        # enable the SonataAdminBundle block
        sonata.admin.block.admin_list:
            contexts: [admin]

sonata_admin:
    templates:
        dashboard: SonataAdminBundle:Core:dashboard.html.twig

sonata_media:
    class:
      media: Application\Sonata\MediaBundle\Entity\Media
      gallery: Application\Sonata\MediaBundle\Entity\Gallery
      gallery_has_media: Application\Sonata\MediaBundle\Entity\GalleryHasMedia
    # if you don't use default namespace configuration
    #class:
    #    media: MyVendor\MediaBundle\Entity\Media
    #    gallery: MyVendor\MediaBundle\Entity\Gallery
    #    gallery_has_media: MyVendor\MediaBundle\Entity\GalleryHasMedia
    db_driver: doctrine_orm # or doctrine_mongodb, doctrine_phpcr it is mandatory to choose one here
    default_context: default # you need to set a context
    contexts:
      default:  # the default context is mandatory
        providers:
          - sonata.media.provider.dailymotion
          - sonata.media.provider.youtube
          - sonata.media.provider.image
          - sonata.media.provider.file
          - sonata.media.provider.vimeo
        formats:
          small: { width: 100 , quality: 70}
          big:   { width: 500 , quality: 70}
      images:
        providers:
          - sonata.media.provider.image
          - sonata.media.provider.custom
        formats:
          small: { width: 160 , quality: 70}
          big:   { width: 500 , quality: 70}

    cdn:
      server:
        path: /uploads/media # http://media.sonata-project.org/
    filesystem:
      local:
        directory:  "%kernel.root_dir%/../web/uploads/media"
        create: false